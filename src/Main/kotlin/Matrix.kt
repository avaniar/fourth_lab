open class Matrix(input: Array<Array<Double>>) {
    protected var data: Array<Array<Double>>

    //initialization
    init {
        for (i in 1 until input.size)
            if (input[i - 1].size != input[i].size)
                throw IllegalArgumentException("Invalid array!")
        data = Array(input.size) { (Array(input[0].size) { 0.0 }) }
        for (i in input.indices)
            for (j in input[0].indices)
                data[i][j] = input[i][j]
    }

    val rowsSize: Int get() = data.size
    val columsSize: Int get() = data[0].size

    //plus operator
    operator fun plus(other: Matrix): Matrix {
        if (this.rowsSize == other.rowsSize && this.columsSize == this.columsSize) {
            val outputMatrix = Matrix(Array(this.rowsSize) { (Array(this.columsSize) { 0.0 }) })
            for (i in 0 until this.rowsSize)
                for (j in 0 until this.columsSize)
                    outputMatrix.data[i][j] = this.data[i][j] + other.data[i][j]
            return outputMatrix
        } else
            throw IllegalArgumentException("The addition operation cannot be used for matrices of different sizes")
    }

    //minus operator
    operator fun minus(other: Matrix): Matrix {
        if (this.rowsSize == other.rowsSize && this.columsSize == this.columsSize) {
            val outputMatrix = Matrix(Array(this.rowsSize) { (Array(this.columsSize) { 0.0 }) })
            for (i in 0 until this.rowsSize)
                for (j in 0 until this.columsSize)
                    outputMatrix.data[i][j] = this.data[i][j] - other.data[i][j]
            return outputMatrix
        } else
            throw IllegalArgumentException("The subtraction operation cannot be used for matrices of different sizes")
    }

    //times operator
    operator fun times(other: Matrix): Matrix {
        if (this.columsSize == other.rowsSize) {
            val outputMatrix = Matrix(Array(this.rowsSize) { (Array(other.columsSize) { 0.0 }) })
            for (i in 0 until this.rowsSize)
                for (j in 0 until other.columsSize)
                    for (k in 0 until this.columsSize)
                        outputMatrix.data[i][j] += this.data[i][k] * other.data[k][j]
            return outputMatrix
        } else
            throw IllegalArgumentException("Matrices are not compatible.")
    }

    //times operator with scalar
    operator fun times(scalar: Double): Matrix {
        val outputMatrix = Matrix(Array(this.rowsSize) { (Array(this.columsSize) { 0.0 }) })
        for (i in 0 until this.rowsSize)
            for (j in 0 until this.columsSize)
                outputMatrix.data[i][j] = this.data[i][j] * scalar
        return outputMatrix
    }

    //div operator with scalar
    operator fun div(scalar: Double): Matrix {
        if (scalar == 0.0)
            throw IllegalArgumentException("Division by zero")
        val outputMatrix = Matrix(Array(this.rowsSize) { (Array(this.columsSize) { 0.0 }) })
        for (i in 0 until this.rowsSize)
            for (j in 0 until this.columsSize)
                outputMatrix.data[i][j] = this.data[i][j] / scalar
        return outputMatrix
    }

    //get operator
    operator fun get(i: Int, j: Int): Double {
        return this.data[i][j]
    }

    //unary minus
    operator fun unaryMinus(): Matrix {
        return this * (-1.0)
    }

    //unary plus
    operator fun unaryPlus(): Matrix {
        return this
    }

    //equals
    override fun equals(other: Any?): Boolean {
        if (this === other) return true//if equal by reference
        if (this.javaClass != other?.javaClass) return false//If the classes are not equal
        other as Matrix
        if (!this.data.contentEquals(other.data)) return false
        if (this.rowsSize != other.rowsSize) return false
        if (this.columsSize != other.columsSize) return false
        return true
    }

    //console output
    override fun toString(): String {
        var outputMatrix = ""
        for (i in 0 until this.rowsSize) {
            for (j in 0 until this.columsSize)
                outputMatrix += "${this.data[i][j]} "
            outputMatrix += "\n"
        }
        return outputMatrix
    }

    //generated by IDE
    override fun hashCode(): Int {
        var result = data.contentDeepHashCode()
        result = 31 * result + rowsSize
        result = 31 * result + columsSize
        return result
    }
}
